using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
using CHENCONGCONG;
namespace CHENCONGCONG
{
    ///// <summary>
    ///// 注册码
    ///// </summary>
    //public enum string
    //{
    //    /// <summary>
    //    /// string string float,float,int
    //    /// </summary>
    //    ShowText = 0,
    //}

    /// <summary>
    /// 事件管理
    /// </summary>
    public class EventCenter
    {
        static Dictionary<string, Delegate> m_EventTable = new Dictionary<string, Delegate>();

        static void OnListenerAdding(string str, Delegate callBack)
        {
            if (!m_EventTable.ContainsKey(str))
            {
                m_EventTable.Add(str, null);
            }
            Delegate d = m_EventTable[str];
            if (d != null && d.GetType() != callBack.GetType())
            {
                throw new Exception(string.Format("尝试为事件{0}添加不同类型的委托，当前事件对应的的委托是{1}，要添加的委托类型是{2}", str, d.GetType(), callBack));
            }
        }

        static void OnListenerRemoving(string str, Delegate callBack)
        {
            if (m_EventTable.ContainsKey(str))
            {
                Delegate d = m_EventTable[str];
                if (d == null)
                {
                    throw new Exception(string.Format("移除监听错误:事件{0}没有对应的委托", str));
                }
                else if (d.GetType() != callBack.GetType())
                {
                    throw new Exception(string.Format("移除监听错误:尝试为事件{0}移除不同类型的委托，当前委托类型为{1}" +
                        ",要移除的委托的类型为{2}", str, d.GetType(), callBack.GetType()));
                }
            }
            else
            {
                throw new Exception(string.Format("移除监听错误:没有事件码{0}", str));
            }
        }

        static void OnListenerRemoved(string str)
        {
            if (m_EventTable[str] == null)
            {
                m_EventTable.Remove(str);
            }
        }
        /// <summary>
        /// 无参添加监听的方法
        /// </summary>-
        /// <param name="str"></param>
        /// <param name="callBack"></param>
        public static void AddListener(string str, CallBack callBack)
        {
            OnListenerAdding(str, callBack);
            m_EventTable[str] = (CallBack)m_EventTable[str] + callBack;
        }
        /// <summary>
        /// 1参添加监听的方法
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="str"></param>
        /// <param name="callBack"></param>
        public static void AddListener<T>(string str, CallBack<T> callBack)
        {
            OnListenerAdding(str, callBack);
            m_EventTable[str] = (CallBack<T>)m_EventTable[str] + callBack;
        }
        /// <summary>
        /// 2参添加监听的方法
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="X"></typeparam>
        /// <param name="str"></param>
        /// <param name="callBack"></param>
        public static void AddListener<T, X>(string str, CallBack<T, X> callBack)
        {
            OnListenerAdding(str, callBack);
            m_EventTable[str] = (CallBack<T, X>)m_EventTable[str] + callBack;
        }

        public static void AddListener<T, X, Y>(string str, CallBack<T, X, Y> callBack)
        {
            OnListenerAdding(str, callBack);
            m_EventTable[str] = (CallBack<T, X, Y>)m_EventTable[str] + callBack;
        }

        public static void AddListener<T, X, Y, Z>(string str, CallBack<T, X, Y, Z> callBack)
        {
            OnListenerAdding(str, callBack);
            m_EventTable[str] = (CallBack<T, X, Y, Z>)m_EventTable[str] + callBack;
        }
        public static void AddListener<T, X, Y, Z, W>(string str, CallBack<T, X, Y, Z, W> callBack)
        {
            OnListenerAdding(str, callBack);
            m_EventTable[str] = (CallBack<T, X, Y, Z, W>)m_EventTable[str] + callBack;
        }
        /// <summary>
        /// 移除无参监听的方法
        /// </summary>
        /// <param name="str"></param>
        /// <param name="callBack"></param>
        public static void RemoveListener(string str, CallBack callBack)
        {
            OnListenerRemoving(str, callBack);
            m_EventTable[str] = (CallBack)m_EventTable[str] - callBack;
            OnListenerRemoved(str);
        }
        /// <summary>
        /// 移除1参监听的方法
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="str"></param>
        /// <param name="callBack"></param>
        public static void RemoveListener<T>(string str, CallBack<T> callBack)
        {
            OnListenerRemoving(str, callBack);
            m_EventTable[str] = (CallBack<T>)m_EventTable[str] - callBack;
            OnListenerRemoved(str);
        }
        /// <summary>
        /// 移除2参监听的方法
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="str"></param>
        /// <param name="callBack"></param>
        public static void RemoveListener<T, X>(string str, CallBack<T, X> callBack)
        {
            OnListenerRemoving(str, callBack);
            m_EventTable[str] = (CallBack<T, X>)m_EventTable[str] - callBack;
            OnListenerRemoved(str);
        }
        public static void RemoveListener<T, X, Y>(string str, CallBack<T, X, Y> callBack)
        {
            OnListenerRemoving(str, callBack);
            m_EventTable[str] = (CallBack<T, X, Y>)m_EventTable[str] - callBack;
            OnListenerRemoved(str);
        }

        public static void RemoveListener<T, X, Y, Z>(string str, CallBack<T, X, Y, Z> callBack)
        {
            OnListenerRemoving(str, callBack);
            m_EventTable[str] = (CallBack<T, X, Y, Z>)m_EventTable[str] - callBack;
            OnListenerRemoved(str);
        }

        public static void RemoveListener<T, X, Y, Z, W>(string str, CallBack<T, X, Y, Z, W> callBack)
        {
            OnListenerRemoving(str, callBack);
            m_EventTable[str] = (CallBack<T, X, Y, Z, W>)m_EventTable[str] - callBack;
            OnListenerRemoved(str);
        }
        /// <summary>
        /// 广播无参方法
        /// </summary>
        /// <param name="str"></param>
        public static void Broadcast(string str)
        {
            Delegate d;
            if (m_EventTable.TryGetValue(str, out d))
            {
                CallBack callBack = d as CallBack;
                if (callBack != null)
                {
                    callBack();
                }
                else
                {
                    throw new Exception(string.Format("广播事件错误:事件{0}对应的委托具有不同类型", str));
                }
            }
        }
        /// <summary>
        /// 广播1参方法
        /// </summary>
        /// <param name="str"></param>
        public static void Broadcast<T>(string str, T arg)
        {
            Delegate d;
            if (m_EventTable.TryGetValue(str, out d))
            {
                CallBack<T> callBack = d as CallBack<T>;
                if (callBack != null)
                {
                    callBack(arg);
                }
                else
                {
                    throw new Exception(string.Format("广播事件错误:事件{0}对应的委托具有不同类型", str));
                }
            }
        }
        /// <summary>
        /// 广播2参方法
        /// </summary>
        /// <param name="str"></param>
        public static void Broadcast<T, X>(string str, T arg1, X arg2)
        {
            Delegate d;
            if (m_EventTable.TryGetValue(str, out d))
            {
                CallBack<T, X> callBack = d as CallBack<T, X>;
                if (callBack != null)
                {
                    callBack(arg1, arg2);
                }
                else
                {
                    throw new Exception(string.Format("广播事件错误:事件{0}对应的委托具有不同类型", str));
                }
            }
        }

        public static void Broadcast<T, X, Y>(string str, T arg1, X arg2, Y arg3)
        {
            Delegate d;
            if (m_EventTable.TryGetValue(str, out d))
            {
                CallBack<T, X, Y> callBack = d as CallBack<T, X, Y>;
                if (callBack != null)
                {
                    callBack(arg1, arg2, arg3);
                }
                else
                {
                    throw new Exception(string.Format("广播事件错误:事件{0}对应的委托具有不同类型", str));
                }
            }
        }

        public static void Broadcast<T, X, Y, Z>(string str, T arg1, X arg2, Y arg3, Z arg4)
        {
            Delegate d;
            if (m_EventTable.TryGetValue(str, out d))
            {
                CallBack<T, X, Y, Z> callBack = d as CallBack<T, X, Y, Z>;
                if (callBack != null)
                {
                    callBack(arg1, arg2, arg3, arg4);
                }
                else
                {
                    throw new Exception(string.Format("广播事件错误:事件{0}对应的委托具有不同类型", str));
                }
            }
        }

        public static void Broadcast<T, X, Y, Z, W>(string str, T arg1, X arg2, Y arg3, Z arg4, W arg5)
        {
            Delegate d;
            if (m_EventTable.TryGetValue(str, out d))
            {
                CallBack<T, X, Y, Z, W> callBack = d as CallBack<T, X, Y, Z, W>;
                if (callBack != null)
                {
                    callBack(arg1, arg2, arg3, arg4, arg5);
                }
                else
                {
                    throw new Exception(string.Format("广播事件错误:事件{0}对应的委托具有不同类型", str));
                }
            }
        }
    }
}
